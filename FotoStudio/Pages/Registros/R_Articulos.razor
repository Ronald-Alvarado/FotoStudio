@page "/RArticulos"
@page "/RArticulos/{ArticuloId:int}"

@using FotoStudio.Entidades
@using FotoStudio.BLL
@using System.Security.Claims;<!--UsuarioId-->


@inject IToastService toast
@inject AuthenticationStateProvider AuthenticationStateProvider


<AuthorizeView>
    <NotAuthorized>
        <p class="h4 text-center">Usted no esta autorizado para acceder a esta pagina</p>

    </NotAuthorized>
</AuthorizeView>

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
{
<EditForm Model="Articulo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="view" style="
        background-repeat: no-repeat;
        background-size: cover;
        background-image: url('resources/fondo.jpg');
        background-position: center;
        width: auto;
        height: 880px;">

        <div class="container shadow-lg p-3 rb-5 bg-light border-dark col-md-8">
            <div class="card">
                <div class="card-header">
                    <h3>Registro Articulo</h3>
                </div>
                <div class="card-body">
                    <form>


                        <div class="form-row align-items-center">
                            <div class="col">
                                <div class="form-group">
                                    <label>Articulo Id:</label>
                                    <div class="input-group">
                                        <InputNumber @bind-Value="Articulo.ArticuloId" class="form-control col-4" />
                                        <div class="input-group-append">
                                            <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">Buscar</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <label>Usuario Id:</label>
                            <InputNumber @bind-Value="Articulo.UsuarioId" class="form-control" ReadOnly="true" />
                            <ValidationMessage For="@(() => Articulo.UsuarioId)" />
                        </div>


                        <div class="form-group">
                            <label>Descripción:</label>
                            <InputText @bind-Value="Articulo.Descripcion" class="form-control" />
                            <ValidationMessage For="@(() => Articulo.Descripcion)" />
                        </div>

                        <div class="form-group">
                            <label>Categoria:</label>
                            <select @bind="Articulo.CategoriaId" class="form-control">
                                <option value="" disabled selected>Elija una Categoria</option>
                                @foreach (var item in Lista)
                                {
                                    <option value="@item.CategoriaId">@item.Nombre</option>
                                }
                            </select>
                        </div>

                        <div class="form-group">
                            <label>Stock:</label>
                            <InputNumber @bind-Value="Articulo.Stock" class="form-control" ReadOnly="true" />
                            <ValidationMessage For="@(() => Articulo.Stock)" />
                        </div>

                        <div class="form-group">
                            <label>Precio:</label>
                            <InputNumber @bind-Value="Articulo.Precio" class="form-control" />
                            <ValidationMessage For="@(() => Articulo.Precio)" />
                        </div>

                        <div class="form-group">
                            <label>Costo:</label>
                            <InputNumber @bind-Value="Articulo.Costo" class="form-control" ReadOnly="True" />
                            <ValidationMessage For="@(() => Articulo.Costo)" />
                        </div>

                    </form>
                </div>

                <!--Buttons--->

                <div class="form-group text-center" display: inline-block>
                    <div class="btn-group mr-5" role="group" aria-label="First group">
                        <button type="button" class="btn btn-outline-secondary" @onclick="Nuevo">Nuevo</button>
                    </div>
                    <div class="btn-group mr-5" role="group" aria-label="Second group">
                        <button type="submit" class="btn btn-outline-success">Guardar</button>
                    </div>

                    <div class="btn-group" role="group" aria-label="Third group">
                        <button type="button" class="btn btn-outline-danger" @onclick="Eliminar">Eliminar</button>
                    </div>
                </div>
            </div>

        </div>

    </div>



</EditForm>
}
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authState { get; set; }//UsuarioId

    public string NombreUsuario { get; set; }
    public string UsuarioId { get; set; }

    Articulos Articulo = new Articulos();

    [Parameter]
    public int ArticuloId { get; set; }

    private List<Categoria> Lista = new List<Categoria>();

    protected override void OnInitialized()
    {
        Nuevo();

        Lista = CategoriaBLL.GetList(c => true);
    }

    private void ObtenerCategoria()
    {
        Lista.Clear();

        Categoria categorias = CategoriaBLL.Buscar(Articulo.CategoriaId);
        Lista.Add(categorias);
    }

    private async void Nuevo()
    {
        NombreUsuario = (await authState).User.Identity.Name;

        UsuarioId = (await authState).User.Claims
            .Where(c => c.Type == ClaimTypes.NameIdentifier)
            .Select(c => c.Value).FirstOrDefault();

        Articulo = new Articulos();

        Articulo.UsuarioId = Convert.ToInt32(UsuarioId);//UsuarioId
    }

    private void Guardar()
    {
        bool guardo;


        guardo = ArticulosBLL.Guardar(Articulo);

        if (guardo)
        {
            Nuevo();
            toast.ShowSuccess("Guardado correctamente");
        }
        else
            toast.ShowError("No fue posible guardar");
    }

    private void Eliminar()
    {
        bool elimino;

        elimino = ArticulosBLL.Eliminar(Articulo.ArticuloId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente");
        }
        else
            toast.ShowError("No fue posible eliminar");
    }

    private void Buscar()
    {
        if (Articulo.ArticuloId > 0)
        {
            var encontrado = ArticulosBLL.Buscar(Articulo.ArticuloId);

            if (encontrado != null)
                this.Articulo = encontrado;
            else
                toast.ShowWarning("No encontrado");
        }
    }

}
