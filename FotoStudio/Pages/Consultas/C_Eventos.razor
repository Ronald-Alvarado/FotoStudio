@page "/CEventos"



@using FotoStudio.Entidades
@using FotoStudio.BLL



@inject IToastService toast
@inject AuthenticationStateProvider AuthenticationStateProvider



<AuthorizeView>
    <NotAuthorized>
        <div class="view BackGroundGeneral">
            <div class="container shadow-lg p-3 rb-5 bg-light border-dark col-md-6">
                <div class="card">
                    <div class="card-header">
                        <p class="h4 text-center">Usted no esta autorizado para acceder a esta pagina</p>
                    </div>
                    <div class="card-body">
                        <p class="text-center">Si no tienes una cuenta puedes registrarte dandole click <a href="@($"RUsuarios")">aqui</a></p>
                    </div>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>



@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
{



    <div class="container shadow-lg p-3 rb-5 bg-light border-dark col-md-12">
        <div class="card">
            <div class="card-header">
                <h1>Consulta de Eventos</h1>
            </div>



            <div class="card-body">
                <form>
                    <div class="form-row">



                        <div class="form-group">
                            <label>Filtro</label>
                            <select class="form-control" @bind="Filtro">
                                <option value="0">Todo</option>
                                <option value="1">Evento Id</option>
                                <option value="2">Usuario Id</option>
                                <option value="3">Fotografo Id</option>
                                <option value="4">Descripción</option>
                                <option value="5">Lugar</option>
                                <option value="6">Precio</option>



                            </select>
                        </div>
                        &nbsp;
                        <div class="form-group">
                            <label>Criterio</label>
                            <div class="input-group">
                                <input type="text" @bind="Criterio" class="form-control">
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary input-group-text" @onclick="@(u => Consultar(Pages))"><i class="oi oi-list-rich" /> Consultar</button>
                                </div>
                            </div>
                        </div>
                    </div>



                    <div class="table-responsive text-nowrap" style="position: relative; height:200px; overflow: auto; display: block;">
                        <table class="table table-striped">
                            <thead class="thead-light">
                                <tr>
                                    <th>Evento Id</th>
                                    <th>Usuario Id</th>
                                    <th>Fotografo Id</th>
                                    <th>Descripción</th>
                                    <th>Lugar</th>
                                    <th>Precio</th>
                                    <th>Fecha Inicio</th>
                                    <th>Fecha Fin</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white">
                                @foreach (var item in auxListaEventos)
                                {
                                <tr>
                                    <td>@item.EventoId</td>
                                    <td>@item.UsuarioId</td>
                                    <td>@item.FotografoId</td>
                                    <td>@item.Descripcion</td>
                                    <td>@item.Lugar</td>
                                    <td>@item.Precio</td>
                                    <td>@item.FechaInicio</td>
                                    <td>@item.FechaFin</td>
                                    <td><a href="@($"REventos/{item.EventoId}")">Ver Evento</a></td>
                                </tr>
                                }
                            </tbody>
                        </table>
                        <nav aria-label="Page navigation example">
                            <ul class="pagination justify-content-center">

                                <li class="page-item">
                                    <a class="page-link" @onclick="@(e => NavegateTo("back"))" tabindex="-1">Back</a>
                                </li>

                                @for (int i = 0; i < Pages; i++)
                                {
                                    var NumeroPagina = i;
                                    <li class="page-item">
                                        <a class="@(CurrentPage == NumeroPagina ? "page-link btn btn-dark" : "page-link btn btn-danger")"
                                           @onclick="@(u => Consultar(Convert.ToDecimal(NumeroPagina)))">
                                            @(i + 1)
                                        </a>
                                    </li>
                                }

                                <li class="page-item">
                                    <a class="page-link" @onclick="@(e => NavegateTo("next"))" tabindex="-1">Next</a>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </form>
            </div>
        </div>
    </div>
}
@code {
    public List<Eventos> ListaEventos { get; set; }
    public List<Eventos> auxListaEventos { get; set; }

    private DateTime Desde { get; set; } = DateTime.Now;
    private DateTime Hasta { get; set; } = DateTime.Now;



    public string Criterio { get; set; }
    public string Filtro { get; set; }
    private string FiltroFecha { get; set; }



    protected override void OnInitialized()
    {
        Nuevo();
    }



    private void Nuevo()
    {
        ListaEventos = new List<Eventos>();
        auxListaEventos = new List<Eventos>();
        Filtro = "0";
        Criterio = string.Empty;
    }

    private int RegistrosPaginas = 1;
    private decimal TotalRegistros, Pages, CurrentPage;

    public void Consultar(decimal pages)
    {
        switch (Filtro)
        {
            case "0": //Todo
                ListaEventos = EventosBLL.GetList(c => true);
                break;
            case "1": //ClienteId
                if (Criterio.Trim().Length > 0)
                {
                    try
                    {
                        int id = Convert.ToInt32(Criterio);
                        ListaEventos = EventosBLL.GetList(a => a.EventoId == id);
                    }
                    catch (FormatException)
                    {
                        toast.ShowWarning("Ingrese un numero");
                    }
                }
                else
                {
                    ListaEventos = EventosBLL.GetList(c => true).OrderBy(c => c.EventoId).ToList();
                }
                break;
            case "2": //UsuarioId
                if (Criterio.Trim().Length > 0)
                {
                    try
                    {
                        int usuarioId = Convert.ToInt32(Criterio);
                        ListaEventos = EventosBLL.GetList(c => c.UsuarioId == usuarioId);
                    }
                    catch (FormatException)
                    {
                        toast.ShowWarning("Ingrese un numero");
                    }
                }
                else
                {
                    ListaEventos = EventosBLL.GetList(c => true).OrderBy(c => c.UsuarioId).ToList();
                }
                break;



            case "3": //FotografoId
                if (Criterio.Trim().Length > 0)
                {
                    try
                    {
                        int FotografoId = Convert.ToInt32(Criterio);
                        ListaEventos = EventosBLL.GetList(c => c.FotografoId == FotografoId);
                    }
                    catch (FormatException)
                    {
                        toast.ShowWarning("Ingrese un numero");
                    }
                }
                else
                {
                    ListaEventos = EventosBLL.GetList(c => true).OrderBy(c => c.FotografoId).ToList();
                }
                break;
            case "4": //Descripcion
                if (Criterio.Trim().Length > 0)
                    ListaEventos = EventosBLL.GetList(c => c.Descripcion.Contains(Criterio));
                else
                    ListaEventos = EventosBLL.GetList(c => true).OrderBy(c => c.Descripcion).ToList();
                break;
            case "5": //Lugar
                if (Criterio.Trim().Length > 0)
                    ListaEventos = EventosBLL.GetList(c => c.Lugar.Contains(Criterio));
                else
                    ListaEventos = EventosBLL.GetList(c => true).OrderBy(c => c.Lugar).ToList();
                break;
            case "6": //Precio
                try
                {
                    decimal Precio = Convert.ToDecimal(Criterio);
                    ListaEventos = EventosBLL.GetList(a => a.Precio == Precio);
                }
                catch (FormatException)
                {
                    toast.ShowWarning("Ingrese un numero");
                }
                break;




        }

        switch (FiltroFecha)
        {
            case "0": //Nada
                break;
            case "1": //Fecha
                ListaEventos = ListaEventos.Where(s => s.FechaInicio >= Desde && s.FechaFin <= Hasta).ToList();
                break;



        }
        TotalRegistros = ListaEventos.Count();
        //var Query = _contexto.Ventas;

        //TotalRegistros = Query.Count();
        //ListaVentas = Query.Take(RegistrosPaginas).ToList();

        Pages = Math.Ceiling(TotalRegistros / RegistrosPaginas);

        ActualizarLista(pages);
    }

    private void ActualizarLista(decimal NumeroPagina)
    {
        auxListaEventos = ListaEventos.Skip(Convert.ToInt32(NumeroPagina) * RegistrosPaginas).Take(RegistrosPaginas).ToList();
        CurrentPage = NumeroPagina;
    }

    private void NavegateTo(string direccion)
    {
        if (direccion == "back" && CurrentPage != 0)
        {
            CurrentPage -= 1;
        }

        if (direccion == "next" && CurrentPage != Pages - 1)
        {
            CurrentPage += 1;
        }

        ActualizarLista(CurrentPage);
    }
}