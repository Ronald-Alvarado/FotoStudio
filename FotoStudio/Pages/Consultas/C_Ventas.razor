@page "/CVentas"

@using FotoStudio.Entidades
@using FotoStudio.BLL
@using FotoStudio.DAL

@inject IToastService toast
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <NotAuthorized>
        <p class="h4 text-center">Usted no esta autorizado para acceder a esta página</p>
    </NotAuthorized>
</AuthorizeView>

@if (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.IsAuthenticated)
{

<div class="container shadow-lg p-3 rb-5 bg-light border-dark col-md-12">
    <div class="card">
        <div class="card-header">
            <h1>Consulta de Ventas</h1>
        </div>

        <div class="card-body">
            <form>
                <div class="form-row">
                    <div class="form-group">
                        <label>Filtrar por Fecha</label>
                        <select class="form-control" @bind="FiltroFecha">
                            <option value="0" disabled selected>Todo</option>
                            <option value="1">Fecha</option>
                        </select>
                    </div>
                    &nbsp;
                    <div class="form-group">
                        <label>Desde</label>
                        <input type="date" @bind="Desde" class="form-control" />
                    </div>
                    &nbsp;
                    <div class="form-group">
                        <label>Hasta</label>
                        <input type="date" @bind="Hasta" class="form-control" />
                    </div>
                    &nbsp;
                    &nbsp;
                    &nbsp;
                    &nbsp;
                    &nbsp;
                    &nbsp;
                    &nbsp;
                    &nbsp;
                    <div class="form-group">
                        <label>Filtro</label>
                        <select class="form-control" @bind="Filtro">
                            <option value="0">Todo</option>
                            <option value="1">Venta Id</option>
                            <option value="2">Cliente Id</option>
                            <option value="3">Nombres</option>
                            <option value="4">Apellidos</option>
                            <option value="5">Total</option>
                            <option value="6">Fecha</option>
                        </select>
                    </div>
                    &nbsp;
                    <div class="form-group">
                        <label>Criterio</label>
                        <div class="input-group">
                            <input type="text" @bind="Criterio" class="form-control">
                            <div class="input-group-append">
                                <button type="button" class="btn btn-primary input-group-text" @onclick="@(u => Consultar(Pages))"><i class="oi oi-list-rich" /> Consultar</button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="table-responsive text-nowrap" style="position: relative; height:200px; overflow: auto; display: block;">
                    <table class="table table-striped">
                        <thead class="thead-light">
                            <tr>
                                <th>VentaId</th>
                                <th>ClienteId</th>
                                <th>Nombres</th>
                                <th>Apellidos</th>
                                <th>Total</th>
                                <th>Fecha</th>

                            </tr>
                        </thead>
                        <tbody class="bg-white">
                            @foreach (var item in auxListaVentas)
                            {
                            <tr>
                                <td>@item.VentaId</td>
                                <td>@item.ClienteId</td>
                                <td>@item.Nombres</td>
                                <td>@item.Apellidos</td>
                                <td>@item.Total</td>
                                <td>@item.Fecha</td>
                                <td><a href="@($"RVentas/{item.VentaId}")">Ver Venta</a></td>
                            </tr>
                            }
                        </tbody>
                    </table>
                    <nav aria-label="Page navigation example">
                        <ul class="pagination justify-content-center">

                            <li class="page-item">
                                <a class="page-link" @onclick="@(e => NavegateTo("back"))" tabindex="-1">Back</a>
                            </li>

                            @for (int i = 0; i < Pages; i++)
                            {
                                var NumeroPagina = i;
                                <li class="page-item" >
                                    <a class="@(CurrentPage == NumeroPagina ? "page-link btn btn-dark" : "page-link btn btn-danger")"
                                            @onclick="@(u => Consultar(Convert.ToDecimal(NumeroPagina)))">
                                        @(i + 1)
                                    </a>
                                </li>
                            }

                            <li class="page-item">
                                <a class="page-link" @onclick="@(e => NavegateTo("next"))" tabindex="-1">Next</a>
                            </li>
                        </ul>
                    </nav>
                </div>
            </form>
        </div>
    </div>
</div>    
}

    @code {
        public List<Venta> ListaVentas { get; set; }
        public List<Venta> auxListaVentas { get; set; }

        Contexto _contexto = new Contexto();

        private DateTime Desde { get; set; } = DateTime.Now;
        private DateTime Hasta { get; set; } = DateTime.Now;

        public string Filtro { get; set; }
        private string FiltroFecha { get; set; }

        public string Criterio { get; set; }

        protected override void OnInitialized()
        {
            Nuevo();
        }

        private void Nuevo()
        {
            ListaVentas = new List<Venta>();
            auxListaVentas = new List<Venta>();
            Filtro = "0";
            Criterio = string.Empty;
        }

        private int RegistrosPaginas = 1;
        private decimal TotalRegistros, Pages, CurrentPage;

        private void Consultar(decimal pages)
        {
            switch (Filtro)
            {
                case "0": //Todo
                    ListaVentas = VentaBLL.GetList(c => true);
                    break;
                case "1": //ventaId
                    if (Criterio.Trim().Length > 0)
                    {
                        try
                        {
                            int id = Convert.ToInt32(Criterio);
                            ListaVentas = VentaBLL.GetList(c => c.VentaId == id);
                        }
                        catch (FormatException)
                        {
                            toast.ShowWarning("Ingrese un numero");
                        }
                    }
                    else
                    {
                        ListaVentas = VentaBLL.GetList(c => true).OrderBy(c => c.VentaId).ToList();
                    }
                    break;
                case "2": //ClienteId
                    if (Criterio.Trim().Length > 0)
                    {
                        try
                        {
                            int ClienteId = Convert.ToInt32(Criterio);
                            ListaVentas = VentaBLL.GetList(c => c.ClienteId == ClienteId);
                        }
                        catch (FormatException)
                        {
                            toast.ShowWarning("Ingrese un numero");
                        }
                    }
                    else
                    {
                        ListaVentas = VentaBLL.GetList(c => true).OrderBy(c => c.ClienteId).ToList();
                    }
                    break;

                case "3": //Nombres
                    if (Criterio.Trim().Length > 0)
                        ListaVentas = VentaBLL.GetList(c => c.Nombres.Contains(Criterio));
                    else
                        ListaVentas = VentaBLL.GetList(c => true).OrderBy(c => c.Nombres).ToList();
                    break;
                case "4": //Apellidos
                    if (Criterio.Trim().Length > 0)
                        ListaVentas = VentaBLL.GetList(c => c.Apellidos.Contains(Criterio));
                    else
                        ListaVentas = VentaBLL.GetList(c => true).OrderBy(c => c.Apellidos).ToList();
                    break;
                case "5": //Total
                    try
                    {
                        decimal Total = Convert.ToDecimal(Criterio);
                        ListaVentas = VentaBLL.GetList(a => a.Total == Total);
                    }
                    catch (FormatException)
                    {
                        toast.ShowWarning("Ingrese un numero");
                    }
                    break;
            }

            switch (FiltroFecha)
            {
                case "0": //Nada
                    break;
                case "1": //Fecha
                    ListaVentas = ListaVentas.Where(s => s.Fecha >= Desde && s.Fecha <= Hasta).ToList();
                    break;

            }
            TotalRegistros = ListaVentas.Count();
            //var Query = _contexto.Ventas;

            //TotalRegistros = Query.Count();
            //ListaVentas = Query.Take(RegistrosPaginas).ToList();

            Pages = Math.Ceiling(TotalRegistros / RegistrosPaginas);

            ActualizarLista(pages);
        }

        private void ActualizarLista(decimal NumeroPagina)
        {
            auxListaVentas = ListaVentas.Skip(Convert.ToInt32(NumeroPagina) * RegistrosPaginas).Take(RegistrosPaginas).ToList();
            CurrentPage = NumeroPagina;
        }

        private void NavegateTo(string direccion)
        {
            if (direccion == "back" && CurrentPage != 0)
            {
                CurrentPage -= 1;
            }

            if (direccion == "next" && CurrentPage != Pages-1)
            {
                CurrentPage += 1;
            }

            ActualizarLista(CurrentPage);
        }
    }
